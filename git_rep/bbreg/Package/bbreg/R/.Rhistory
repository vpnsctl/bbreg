type = "response"
}
if (missing(newdata)) {
predictions = switch(type,
"response" = {
fitted(fit)
},
"link" = {
link_pred = fit$x %*% fit$kappa
names(link_pred) = 1:length(link_pred)
link_pred
},
"precision" = {
pred_prec = exp(fit$v%*%fit$lambda)
names(pred_prec) = 1:length(pred_prec)
pred_prec
},
"variance" = {
variance_pred = fit$mu*(1-fit$mu)*fit$gphi
names(variance_pred) = 1:length(variance_pred)
variance_pred
}
)
}
return(predictions)
}
fitted(fit2)
predict(fit2)
predict(fit2, type = "link")
#############################################################################################
#' @title predict.bbreg
#' @description Function to obtain various predictions based on the fitted model (bessel or beta).
#' @param fit object of class "bbreg" containing results from the fitted model.
#' @param newdata ptionally, a data frame in which to look for variables with which to predict. If omitted, the fitted response values will be provided.
#' @param type the type of prediction. The default is the "response" type, which provided the estimated values for the means. The type "link" provides the estimates for the linear predictor. The type "precision" provides estimates for the precision parameters whereas the type "variance" provides estimates for the variances.
#' @seealso
#' \code{\link{fitted.bbreg}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' predict(fit)}
#' @export
predict.bbreg <- function(fit, newdata=NULL, type = c("response", "link", "precision", "variance"), ...){
if(length(type)>1){
type = "response"
}
if (missing(newdata)) {
predictions = switch(type,
"response" = {
fitted(fit)
},
"link" = {
link_pred = c(fit$x %*% fit$kappa)
names(link_pred) = 1:length(link_pred)
link_pred
},
"precision" = {
pred_prec = c(exp(fit$v%*%fit$lambda))
names(pred_prec) = 1:length(pred_prec)
pred_prec
},
"variance" = {
variance_pred = c(fit$mu*(1-fit$mu)*fit$gphi)
names(variance_pred) = 1:length(variance_pred)
variance_pred
}
)
}
return(predictions)
}
predict(fit2, type = "link")
predict(fit2, type = "precision")
predict(fit2, type = "variance")
predict(fit4)
fit4
rm(predict.betareg)
predict(fit4)
predict(fit4, type="precision")
fix(plot.glm)
?plot
#############################################################################################
#' @title plot.betareg
#' @description Function to build useful plots for bounded regression models.
#' @param M object of class "bbreg" containing results from the fitted model.
#' If the model is fitted with envelope = 0, the graph cannot be created.
#' @param pch symbol to use. This can either be a single character or an integer code for one of a set of graphics symbols (default: solid circle).
#' @param xlim x limits (x1, x2) of the plot. Note that x1 > x2 is allowed and leads to a 'reversed axis'.
#' @param ylim y limits of the plot.
#' @param xlab label for the x axis.
#' @param ylab label for the y axis.
#' @param cex.lab magnification to be used for x and y labels relative to the current setting of cex.
#' @param cex.axis magnification to be used for axis annotation relative to the current setting of cex.
#' @seealso
#' \code{\link{summary}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' n = 100; x = cbind(rbinom(n, 1, 0.5), runif(n, -1, 1)); v = runif(n, -1, 1);
#' z = simdata_bes(kap = c(1, 1, -0.5), lam = c(0.5, -0.5), x, v)
#' M = bbreg(z ~ x | v, envelope = 10)
#' plot(M)}
#' @export
plot.bbreg = function(M,pch=19,xlim=NULL,ylim=NULL,xlab=NULL,ylab=NULL,cex.lab=NULL,cex.axis=NULL)
{
res = M$residuals
call_mod = deparse(M$call)
name = M$modelname
residualname = paste0(toupper(substring(M$residualname,1,1)),substring(M$residualname,2))
residualname = paste0(residualname," residuals")
if(is.null(ylab)==TRUE){ ylabel_1 = residualname }else{ ylabel_1 = ylab }
if(is.null(xlab)==TRUE){ xlabel_1  = paste0("Index\n bbreg(",call_mod,")") }else{ xlabel_1 = xlab }
title_1 = paste0(residualname," vs Index - ",name)
graphics::plot(res, xlab= xlabel_1, ylab=ylabel_1, sub=title_1)
graphics::abline(0,0, lty=3)
invisible(readline(prompt="Hit <Return> to see next plot:"))
plot.new()
env = M$envelope
n = length(res)
residualname = paste0(toupper(substring(M$residualname,1,1)),substring(M$residualname,2))
if(is.null(ylim)==TRUE){ yli = range(res,env) }else{ yli = ylim }
if(is.null(xlim)==TRUE){ xli = c(stats::qnorm(0.5/n),stats::qnorm(1-0.5/n)) }else{ xli = xlim }
if(is.null(ylab)==TRUE){ yla = paste0(residualname," residuals") }else{ yla = ylab }
if(is.null(xlab)==TRUE){ xla = paste0("Theoretical quantiles\n bbreg(",call_mod,")") }else{ xla = xlab }
if(is.null(cex.lab)==TRUE){ cl = 1 }else{ cl = cex.lab }
if(is.null(cex.axis)==TRUE){ ca = 1 }else{ ca = cex.axis }
if(is.null(env)==FALSE){
title_2 = paste0("QQ-Plot with simulated envelopes - ",name)
} else{
title_2 = paste0("QQ-Plot - ", name)
}
RR = stats::qqnorm(res,xlab=xla,ylab=yla,xlim=xli,ylim=yli,pch="",sub=title_2,cex.lab=cl,cex.axis=ca)
if(is.null(env)==FALSE){
aux = sort(RR$x)
graphics::lines(aux,env[1,],col=grDevices::rgb(0.7,0.7,0.7))
graphics::lines(aux,env[3,],col=grDevices::rgb(0.7,0.7,0.7))
graphics::polygon(c(aux,rev(aux)),c(env[3,],rev(env[1,])),col=grDevices::rgb(0.7,0.7,0.7),border=NA)
graphics::lines(aux,env[2,],lty=2,lwd=2)
} else{
graphics::abline(0,1,lty=3)
}
graphics::points(RR$x,RR$y,pch=pch)
invisible(readline(prompt="Hit <Return> to see next plot:"))
plot.new()
}
plot(fit2)
fit2
summary(fit2)
fitted(fit2)
predict(fit2, type = "variance")
plot.bbreg = function(M,pch=19,xlim=NULL,ylim=NULL,xlab=NULL,ylab=NULL,cex.lab=NULL,cex.axis=NULL)
{
res = M$residuals
call_mod = deparse(M$call)
name = M$modelname
residualname = paste0(toupper(substring(M$residualname,1,1)),substring(M$residualname,2))
residualname = paste0(residualname," residuals")
if(is.null(ylab)==TRUE){ ylabel_1 = residualname }else{ ylabel_1 = ylab }
if(is.null(xlab)==TRUE){ xlabel_1  = paste0("Index\n bbreg(",call_mod,")") }else{ xlabel_1 = xlab }
title_1 = paste0(residualname," vs Index - ",name)
graphics::plot(res, xlab= xlabel_1, ylab=ylabel_1, main=title_1)
graphics::abline(0,0, lty=3)
invisible(readline(prompt="Hit <Return> to see next plot:"))
plot.new()
env = M$envelope
n = length(res)
residualname = paste0(toupper(substring(M$residualname,1,1)),substring(M$residualname,2))
if(is.null(ylim)==TRUE){ yli = range(res,env) }else{ yli = ylim }
if(is.null(xlim)==TRUE){ xli = c(stats::qnorm(0.5/n),stats::qnorm(1-0.5/n)) }else{ xli = xlim }
if(is.null(ylab)==TRUE){ yla = paste0(residualname," residuals") }else{ yla = ylab }
if(is.null(xlab)==TRUE){ xla = paste0("Theoretical quantiles\n bbreg(",call_mod,")") }else{ xla = xlab }
if(is.null(cex.lab)==TRUE){ cl = 1 }else{ cl = cex.lab }
if(is.null(cex.axis)==TRUE){ ca = 1 }else{ ca = cex.axis }
if(is.null(env)==FALSE){
title_2 = paste0("QQ-Plot with simulated envelopes - ",name)
} else{
title_2 = paste0("QQ-Plot - ", name)
}
RR = stats::qqnorm(res,xlab=xla,ylab=yla,xlim=xli,ylim=yli,pch="",main=title_2,cex.lab=cl,cex.axis=ca)
if(is.null(env)==FALSE){
aux = sort(RR$x)
graphics::lines(aux,env[1,],col=grDevices::rgb(0.7,0.7,0.7))
graphics::lines(aux,env[3,],col=grDevices::rgb(0.7,0.7,0.7))
graphics::polygon(c(aux,rev(aux)),c(env[3,],rev(env[1,])),col=grDevices::rgb(0.7,0.7,0.7),border=NA)
graphics::lines(aux,env[2,],lty=2,lwd=2)
} else{
graphics::abline(0,1,lty=3)
}
graphics::points(RR$x,RR$y,pch=pch)
invisible(readline(prompt="Hit <Return> to see next plot:"))
plot.new()
}
plot(fit2)
plot(fit3)
#############################################################################################
#' @title print.bbreg
#' @description Function providing a brief description of results related to the regression model (bessel or beta).
#' @param M object of class "bbreg" containing results from the fitted model.
#' @seealso
#' \code{\link{eplot}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' fit}
#' @export
print.bbreg <- function(fit, ...){
nkap = length(fit$kappa)
nlam = length(fit$lambda)
#
itc = fit$intercept
varnames = NULL
if(itc[1]==TRUE){ varnames = "(intercept)" }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=1))))
if(itc[2]==TRUE){ varnames = c(varnames,"(intercept)") }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=2))))
#
if(length(varnames) < (nkap+nlam)){ varnames = names(M$start) }
#
coeff_kappa = fit$kappa
names(coeff_kappa) = varnames[1:nkap]
coeff_lambda = fit$lambda
names(coeff_lambda)= varnames[(nkap+1):(nkap+nlam)]
cat("\n")
cat(fit$message)
cat("\n\n")
cat("Call:","\n")
call_model = deparse(fit$call)
print(paste0("bbreg(",call_model,")")
cat("\n")
cat("Coefficients modeling the mean:","\n")
print(coeff_kappa)
cat("Coefficients modeling the precision:","\n")
print(coeff_lambda)
}
#############################################################################################
#' @title summary.bbreg
#' @description Function providing a summary of results related to the regression model (bessel or beta).
#' @param M object of class "bbreg" containing results from the fitted model.
#' @seealso
#' \code{\link{eplot}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' summary(fit)}
#' @export
summary.bbreg = function(M)
{
nkap = length(M$kappa)
nlam = length(M$lambda)
#
itc = M$intercept
varnames = NULL
if(itc[1]==TRUE){ varnames = "(intercept)" }
varnames = c(varnames,labels(stats::terms(stats::formula(M$call,rhs=1))))
if(itc[2]==TRUE){ varnames = c(varnames,"(intercept)") }
varnames = c(varnames,labels(stats::terms(stats::formula(M$call,rhs=2))))
#
if(length(varnames) < (nkap+nlam)){ varnames = names(M$start) }
#
Est = c(M$kappa,M$lambda)
SEr = M$std_errors
tab = cbind(Est, SEr, Est/SEr, 2*stats::pnorm(-abs(Est/SEr)))
colnames(tab) = c("Estimate", "Std.error", "z-value", "Pr(>|z|)")
rownames(tab) = varnames
tab = list(mean = tab[seq.int(length.out = nkap), , drop = FALSE], precision = tab[seq.int(length.out = nlam) + nkap, , drop = FALSE])
#
digits = max(3,getOption("digits")-3)
#
message(sprintf("\n%s:\n",M$message))
message("Call:\n", paste0("bbreg(",deparse(M$call, width.cutoff = floor(getOption("width") * 0.85)),")"),"",sep="\n")
message(sprintf("%s\n",paste0("Number of iterations of the EM algorithm = ",M$niter)))
#
if(is.null(M$DBB)==FALSE){
cat(sprintf("\n %s:\n","Results of the discrimination test DBB"))
print(structure(round(M$DBB,digits=digits))) }
#
residualname = paste0(toupper(substring(M$residualname,1,1)),substring(M$residualname,2))
cat(sprintf("\n %s:\n",paste0(residualname," residuals")))
print(structure(round(c(M$RSS,as.vector(stats::quantile(M$residuals))), digits=digits), .Names = c("RSS","Min", "1Q", "Median", "3Q", "Max")))
#
if(NROW(tab$mean)){
cat(paste0("\n Coefficients modeling the mean:\n"))
stats::printCoefmat(tab$mean, digits=digits, signif.legend = FALSE)
}else{ message("\n No coefficients modeling the mean. \n") }
#
if(NROW(tab$precision)) {
cat(paste0("\n Coefficients modeling the precision:\n"))
stats::printCoefmat(tab$precision, digits=digits, signif.legend = FALSE)
}else{ message("\n No coefficients modeling the precision. \n") }
#
gp = unique(M$gphi)
if(length(gp)==1){ cat(sprintf("%s\n",paste0("g(phi) = ",round(gp,digits=digits)))) }
#
if(getOption("show.signif.stars")){
cat("---\n Signif. codes: ", "0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1", "\n\n") }
#
if(is.null(M$RSS_pred)==FALSE){
message(sprintf("%s\n",paste0("Average RSS from the predictive accuracy simulation = ",round(mean(M$RSS_pred),digits=digits))))}
#
if(is.null(M$envelope)==FALSE){
message(sprintf("%s\n",paste0("Percentage of residual within the envelope = ",round(M$envelope_prop,digits=digits))))}
}
fit2
fit2
#############################################################################################
#' @title print.bbreg
#' @description Function providing a brief description of results related to the regression model (bessel or beta).
#' @param M object of class "bbreg" containing results from the fitted model.
#' @seealso
#' \code{\link{eplot}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' fit}
#' @export
print.bbreg <- function(fit, ...){
nkap = length(fit$kappa)
nlam = length(fit$lambda)
#
itc = fit$intercept
varnames = NULL
if(itc[1]==TRUE){ varnames = "(intercept)" }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=1))))
if(itc[2]==TRUE){ varnames = c(varnames,"(intercept)") }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=2))))
#
if(length(varnames) < (nkap+nlam)){ varnames = names(M$start) }
#
coeff_kappa = fit$kappa
names(coeff_kappa) = varnames[1:nkap]
coeff_lambda = fit$lambda
names(coeff_lambda)= varnames[(nkap+1):(nkap+nlam)]
cat("\n")
cat(fit$message)
cat("\n\n")
cat("Call:","\n")
call_model = deparse(fit$call)
print(paste0("bbreg(",call_model,")")
cat("\n")
cat("Coefficients modeling the mean:","\n")
print(coeff_kappa)
cat("Coefficients modeling the precision:","\n")
print(coeff_lambda)
}
#############################################################################################
#' @title print.bbreg
#' @description Function providing a brief description of results related to the regression model (bessel or beta).
#' @param M object of class "bbreg" containing results from the fitted model.
#' @seealso
#' \code{\link{eplot}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' fit}
#' @export
print.bbreg <- function(fit, ...){
nkap = length(fit$kappa)
nlam = length(fit$lambda)
#
itc = fit$intercept
varnames = NULL
if(itc[1]==TRUE){ varnames = "(intercept)" }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=1))))
if(itc[2]==TRUE){ varnames = c(varnames,"(intercept)") }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=2))))
#
if(length(varnames) < (nkap+nlam)){ varnames = names(M$start) }
#
coeff_kappa = fit$kappa
names(coeff_kappa) = varnames[1:nkap]
coeff_lambda = fit$lambda
names(coeff_lambda)= varnames[(nkap+1):(nkap+nlam)]
cat("\n")
cat(fit$message)
cat("\n\n")
cat("Call:","\n")
call_model = deparse(fit$call)
print(paste0("bbreg(",call_model,")"))
cat("\n")
cat("Coefficients modeling the mean:","\n")
print(coeff_kappa)
cat("Coefficients modeling the precision:","\n")
print(coeff_lambda)
}
fit2
#############################################################################################
#' @title print.bbreg
#' @description Function providing a brief description of results related to the regression model (bessel or beta).
#' @param M object of class "bbreg" containing results from the fitted model.
#' @seealso
#' \code{\link{eplot}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' fit}
#' @export
print.bbreg <- function(fit, ...){
nkap = length(fit$kappa)
nlam = length(fit$lambda)
#
itc = fit$intercept
varnames = NULL
if(itc[1]==TRUE){ varnames = "(intercept)" }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=1))))
if(itc[2]==TRUE){ varnames = c(varnames,"(intercept)") }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=2))))
#
if(length(varnames) < (nkap+nlam)){ varnames = names(M$start) }
#
coeff_kappa = fit$kappa
names(coeff_kappa) = varnames[1:nkap]
coeff_lambda = fit$lambda
names(coeff_lambda)= varnames[(nkap+1):(nkap+nlam)]
cat("\n")
cat(fit$message)
cat("\n\n")
cat("Call:","\n")
call_model = deparse(fit$call)
cat(paste0("bbreg(",call_model,")"))
cat("\n")
cat("Coefficients modeling the mean:","\n")
print(coeff_kappa)
cat("Coefficients modeling the precision:","\n")
print(coeff_lambda)
}
fit2
#############################################################################################
#' @title print.bbreg
#' @description Function providing a brief description of results related to the regression model (bessel or beta).
#' @param M object of class "bbreg" containing results from the fitted model.
#' @seealso
#' \code{\link{eplot}}, \code{\link{dbbtest}}
#' @examples
#' \donttest{
#' fit = bbreg(agreement ~ priming + eliciting, data = WT)
#' fit}
#' @export
print.bbreg <- function(fit, ...){
nkap = length(fit$kappa)
nlam = length(fit$lambda)
#
itc = fit$intercept
varnames = NULL
if(itc[1]==TRUE){ varnames = "(intercept)" }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=1))))
if(itc[2]==TRUE){ varnames = c(varnames,"(intercept)") }
varnames = c(varnames,labels(stats::terms(stats::formula(fit$call,rhs=2))))
#
if(length(varnames) < (nkap+nlam)){ varnames = names(M$start) }
#
coeff_kappa = fit$kappa
names(coeff_kappa) = varnames[1:nkap]
coeff_lambda = fit$lambda
names(coeff_lambda)= varnames[(nkap+1):(nkap+nlam)]
cat("\n")
cat(fit$message)
cat("\n\n")
cat("Call:","\n")
call_model = deparse(fit$call)
cat(paste0("bbreg(",call_model,")"))
cat("\n\n")
cat("Coefficients modeling the mean:","\n")
print(coeff_kappa)
cat("Coefficients modeling the precision:","\n")
print(coeff_lambda)
}
fit2
summary(fit2)
install.packages("D:/OneDrive/BBreg/pacote/bbreg_2.0.0.tar.gz", repos = NULL, type = "source")
vignette('intro-bbreg')
browseVignettes()
setwd("D:/OneDrive/BBreg/pacote/bbreg/R")
devtools::check()
bbreg(anxiety ~ stress, data = SA)
fit = bbreg(anxiety ~ stress, data = SA)
fit
ls(fit)
fit = bbreg(anxiety ~ stress, data = SA, envelope = 30)
ls(fit)
fit$envelope_prop
fit = bbreg(anxiety ~ stress, data = SA, envelope = 30, model = "bessel")
fit$envelope_prop
fit = bbreg(stress ~ anxiety, data = SA)
fit
fit = bbreg(anxiety ~ stress, data = SA, envelope = 300)
fit$envelope_prop
fit_beta = bbreg(anxiety ~ stress, data = SA, envelope = 300, model = "beta")
fit_beta
fit_beta$envelope_prop
fit_cloglog = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "cloglog")
fit_cloglog$envelope_prop
fit_beta_cloglog = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "cloglog", model = "beta")
fit_beta_cloglog$envelope_prop
fit_cloglog
fit_cloglog = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "cloglog", model = "bessel")
fit_cloglog$envelope_prop
fit_probit = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "probit", model = "bessel")
fit_probit$envelope_prop
fit_probit_beta = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "probit", model = "beta")
fit_probit_beta$envelope_prop
fit_cauchit = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "cauchit", model = "bessel")
fit_cauchit$envelope_prop
fit_cauchit_beta = bbreg(anxiety ~ stress, data = SA, envelope = 300, link.mean = "cauchit", model = "beta")
fit_cauchit_beta$envelope_prop
fit
library(betareg)
data("StressAnxiety")
data(SA)
StressAnxiety
SA
SA = StressAnxiety
setwd("D:/OneDrive/BBreg/pacote/bbreg/R")
devtools::check()
devtools::check()
